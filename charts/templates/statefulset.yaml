apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "marklogic.fullname" . }}-{{ .Values.groupName}}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: marklogic-{{ .Values.groupName}}
    {{- include "marklogic.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "marklogic.headlessServiceName" . }}
  replicas: {{ .Values.dNodeCount }}
  selector:
    matchLabels:
      {{- include "marklogic.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: marklogic-{{ .Values.groupName}}
  template:
    metadata:
      labels:
        {{- include "marklogic.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: marklogic-{{ .Values.groupName}}
    spec:
      serviceAccountName: {{ include "marklogic.serviceAccountName" . }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8}}
      {{- end }}
      containers:
        - name: marklogic-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy}}
          volumeMounts:
            - name: datadir
              mountPath: {{ .Values.persistence.mountPath }}
            {{- if .Values.extraVolumeMounts }}
              {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
          env:
            - name: ML_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "marklogic.fullname" . }}
                  key: username
            - name: ML_ADMIN_PASS
              valueFrom:
                  secretKeyRef:
                    name: {{ include "marklogic.fullname" . }}
                    key: password
            - name: "BOOTSTRAP_CLUSTER_NAME"
              value: {{ .Values.bootstrapClusterName }}
            - name: GROUP_NAME
              value: {{ .Values.group.name }}
          envFrom:
            - configMapRef:
                name: {{ include "marklogic.fullname" . }}
          command:
            - bash
            - '-c'
            - |
              echo '### Begin ML Container Config ###'
              
              echo "BOOTSTRAP_CLUSTER_NAME: $BOOTSTRAP_CLUSTER_NAME"
              echo "GROUP_NAME: $GROUP_NAME"

              GROUP_CFG_TEMPLATE='{"group-name":"%s"}'
              GROUP_CFG=$(printf "$GROUP_CFG_TEMPLATE" "$GROUP_NAME")

              echo "GROUP_CFG: $GROUP_CFG"

              echo "ML_FQDN_SUFFIX: $ML_FQDN_SUFFIX"

              # Set Hostname to the value of hostname command to /etc/marklogic.conf
              HOST_FQDN="$(hostname).$ML_FQDN_SUFFIX"
              echo "export MARKLOGIC_HOSTNAME=\"$HOST_FQDN\"" | sudo tee /etc/marklogic.conf

              cd ~

              AUTH_CURL="curl --anyauth --user $ML_ADMIN_USER:$ML_ADMIN_PASS -m 20 -s "

              # Start MarkLogic
              sudo service MarkLogic start
              sleep 5s

              # Initialize and Setup Admin User
              echo '### Initialize and Setup Admin User ###'
              ML_STATUS_CODE=`curl -s -o /dev/null --write-out %{response_code}  http://localhost:8001/admin/v1/init`
              if [ "$ML_STATUS_CODE" == "401" ]; then
                echo "Server is already configured." 
              else
                curl -X POST -d "" http://$HOSTNAME:8001/admin/v1/init
                sleep 5s

                curl -X POST -H "Content-type: application/x-www-form-urlencoded" \
                    --data "admin-username=$ML_ADMIN_USER" --data "admin-password=$ML_ADMIN_PASS" \
                    --data "realm=public" \
                    http://$HOSTNAME:8001/admin/v1/instance-admin
                sleep 10s

                if [[ -z "${BOOTSTRAP_CLUSTER_NAME}" ]]; then
                  echo "### Deployment type is separate E/D node ###"
                  echo '### Setting Group on Bootstrap host###'
                  
                  $AUTH_CURL -X PUT -H "Content-type: application/json" \
                  -d "${GROUP_CFG}" http://localhost:8002/manage/v2/groups/Default/properties
                  sleep 5s
          
                fi

                # for EA1 release, disable turning on XDQP by default.
                # Turn on XDQP encryption via CMA
                # $AUTH_CURL -X POST -H 'Content-Type: application/json' \
                #     -d '{"config":[{"op":"update","group":[{"group-name":"Default","xdqp-ssl-enabled":true}]}]}' \
                #     http://$HOSTNAME:8002/manage/v3/

                # Join Cluster
                
                if [[ -n "${BOOTSTRAP_CLUSTER_NAME}" ]]; then
                  echo "### Joining Cluster ###"
                  joiner=$HOSTNAME
                  cluster="$BOOTSTRAP_CLUSTER_NAME"
                  echo "ML_BOOTSTRAP_HOST: $ML_BOOTSTRAP_HOST"
                  echo "BOOTSTRAP_CLUSTER_NAME: $BOOTSTRAP_CLUSTER_NAME"
                  $AUTH_CURL -X POST  -H "Content-type: application/json" \
                  -d "${GROUP_CFG}" http://${cluster}:8002/manage/v2/groups
                  sleep 10s

                  $AUTH_CURL -o host.xml -X GET -H "Accept: application/xml" http://${joiner}:8001/admin/v1/server-config
                  $AUTH_CURL -X POST -d "group=${GROUP_NAME}" --data-urlencode "server-config@./host.xml" -H "Content-type: application/x-www-form-urlencoded" -o cluster.zip http://${cluster}:8001/admin/v1/cluster-config

                  sleep 10s

                  $AUTH_CURL -X POST -H "Content-type: application/zip" --data-binary @./cluster.zip http://${joiner}:8001/admin/v1/cluster-config 
                  sleep 5s

                  rm -f host.xml
                  rm -f cluster.zip
                fi

              fi

              # mark the pod ready for readiness probe
              sudo touch /var/opt/MarkLogic/ready

              echo '### END ML Container Config ###'

              tail -f $MARKLOGIC_DATA_DIR/Logs/ErrorLog.txt
          ports:
            - containerPort: 7997
              name: health-check
            - containerPort: 7998
              name: cluster-port
            - containerPort: 7999
              name: cluster-port2
            - containerPort: 8000
              name: app-services
            - containerPort: 8001
              name: admin
            - containerPort: 8002
              name: manage
            {{- if .Values.extraContainerPorts }}
              {{- toYaml .Values.extraContainerPorts | nindent 12 }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: health-check
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - ls
                - /var/opt/MarkLogic/ready
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- with .Values.resources }}
          resources: {{- toYaml . | nindent 12 }}
          {{- end }}
      dnsConfig:
        searches:
          - {{ include "marklogic.headlessURL" . }}
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
        - name: {{ include "marklogic.fullname" . }}-registry
      {{- end }}
      {{- if or (not .Values.persistence.enabled) (.Values.extraVolumes) }}
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: datadir
          emptyDir: {}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        labels: 
          {{- include "marklogic.selectorLabels" . | nindent 10 }}
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote}}
          {{- end }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end}}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- end }}
